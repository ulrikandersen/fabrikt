openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths: {}
components:
  schemas:
    TransportationDevice:
      type: object
      required:
        - deviceType
        - make
        - model
      properties:
        deviceType:
          type: string
          enum:
            - bike
            - skateboard
            - rollerskates
            - Ho_ver-boaRD
        make:
          type: string
        model:
          type: string
          format: uuid
    Pet:
      type: object
      required:
        - id
        - name
        - dateOfBirth
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
        dateOfBirth:
          type: string
          format: date
        lastFedAt:
          type: string
          format: date-time
        earTagUuid:
          type: string
          format: uuid
        imageUrl:
          type: string
          format: uri
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/Pet"
    # Polymorphic type with type as discriminator
    Phone:
      oneOf:
        - $ref: "#/components/schemas/LandlinePhone"
        - $ref: "#/components/schemas/MobilePhone"
      discriminator:
        propertyName: type
        mapping:
          landline: '#/components/schemas/LandlinePhone'
          mobile: '#/components/schemas/MobilePhone'
    LandlinePhone:
      type: object
      required:
        - type
        - number
        - area_code
      properties:
        type:
          type: string
        number:
          type: string
        area_code:
          type: string
    MobilePhone:
      type: object
      required:
        - type
        - number
      properties:
        type:
          type: string
        number:
          type: string
    # Polymorphic type with moduleType as discriminator
    Module:
      oneOf:
        - $ref: "#/components/schemas/ModuleA"
        - $ref: "#/components/schemas/ModuleB"
      discriminator:
        propertyName: moduleType
        mapping:
          a: '#/components/schemas/ModuleA'
          b: '#/components/schemas/ModuleB'
    ModuleA:
      type: object
      required:
          - moduleType
      properties:
        moduleType:
          type: string
    ModuleB:
      type: object
      required:
        - moduleType
      properties:
        moduleType:
          type: string
    # Polymorphic type with enum as discriminator
    State:
      oneOf:
        - $ref: "#/components/schemas/StateA"
        - $ref: "#/components/schemas/StateB"
      discriminator:
        propertyName: status
        mapping:
          a: '#/components/schemas/StateA'
          b: '#/components/schemas/StateB'
    StateA:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/Status'
    StateB:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/Status'
    Status:
      type: string
      enum:
        - a
        - b
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
